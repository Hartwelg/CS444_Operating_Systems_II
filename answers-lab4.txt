1. It is necessary to have the macro MPBOOTPHYS in kern/mpentry.S because it is needed in order to calculate the address of symbols. This is done by subtracting mpentry_start from the physical address where MPENTRY is located in memory. Without MPBOOTPHYS in kern/mpentry.S, the linker would not be able to find the correct address for the code we are loading into memory, and so it would not run our code. This would cause JOS to operate incorrectly.
2. We still need separate kernel stacks for each CPU because it would be possible for multiple processes to push different trap frames to a shared stack, causing other processes to pop the wrong trap frames off of the stack when re-entering user mode. Using separate stacks prevents this issue.
3. The pointer e can be dereferenced both before and after the addressing switch in env_run() because e is allocated on the current CPU's kernel stack. This means that e can be dereferenced without changing the location of the kernel stack in memory.
4. The registers of the old environment are saved to be restored later so that execution of the old environment can resume at a later time without issues. This occurs any time the CPU switches from user mode to kernel mode and creates a trap frame.